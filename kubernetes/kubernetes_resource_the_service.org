:PROPERTIES:
:ID:       b8be55e6-9cc6-48da-8bce-772503f1d21d
:END:
#+title: Kubernetes Resource: The Service

* Debugging Kubernetes Services
:PROPERTIES:
:ROAM_REFS: https://kubernetes.io/docs/tasks/debug-application-cluster/debug-service/
:END:

#+caption: View pod IP addresses that services route to
#+begin_src sh
kubectl get endpoints
kubectl get pods -o wide
#+end_src

* Kubernetes Service Cluster Hostname

=${service_name}.${service_namespace}.svc.cluster.local:${service_port}=

* Kubernetes Service Types
:PROPERTIES:
:ROAF_REFS: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
:END:

:INSIGHTFUL_STACKOVERFLOW_POST:
A ClusterIP exposes the following:

spec.clusterIp:spec.ports[*].port You can only access this service while inside the
cluster. It is accessible from its spec.clusterIp port. If a spec.ports[*].targetPort is
set it will route from the port to the targetPort. The CLUSTER-IP you get when calling
kubectl get services is the IP assigned to this service within the cluster internally.

A NodePort exposes the following:

<NodeIP>:spec.ports[*].nodePort spec.clusterIp:spec.ports[*].port If you access this
service on a nodePort from the node's external IP, it will route the request to
spec.clusterIp:spec.ports[*].port, which will in turn route it to your
spec.ports[*].targetPort, if set. This service can also be accessed in the same way as
ClusterIP.

Your NodeIPs are the external IP addresses of the nodes. You cannot access your service
from spec.clusterIp:spec.ports[*].nodePort.

A LoadBalancer exposes the following:

spec.loadBalancerIp:spec.ports[*].port <NodeIP>:spec.ports[*].nodePort
spec.clusterIp:spec.ports[*].port You can access this service from your load balancer's IP
address, which routes your request to a nodePort, which in turn routes the request to the
clusterIP port. You can access this service as you would a NodePort or a ClusterIP service
as well.
:END:
